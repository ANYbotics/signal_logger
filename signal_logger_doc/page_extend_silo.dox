/*! \page page_extend_silo Extend the signal logger with additional log types

<H3>Add a new data type to the logger</H3>
In order to add a type you have to provide a complete set of traits in order to
publish and save a log element of that type. These traits have to be added in
signal_logger_ros/signal_logger_ros_traits.hpp and signal_logger_std/signal_logger_std_traits.hpp.
Moreover it makes sense to add this new type to signal_logger/LogElementTypes.hpp

Note: The buffer is templated on the log type. If you use a type the buffer can not handle, you can also
try to add your time to the buffer customization in signal_logger/Buffer.hpp.

<H3>Example add a Circle type to the signal logger</H3>

signal_logger/LogElementTypes.hpp :
\code{c}
struct Circle {
  double diameter;
  Eigen::Vector2d center;
};
\endcode

signal_logger_std/signal_logger_std_traits.hpp :
\code{c}
template <>
struct sls_traits<signal_logger::Circle>
{
  static void writeLogElementToStreams(std::stringstream* headerStream,
                                       std::stringstream* dataStream,
                                       const std::vector<signal_logger::Circle> & values,
                                       const std::string & name,
                                       const std::size_t divider,
                                       const bool isBufferLooping )
  {
    // Check for nonzero size
    if(values.size() == 0)
      return;

    // Header for diameter
    (*headerStream) << name << "_diameter "
        << sizeof(values.front().diameter) <<  " "
        << values.size() << " "
        << divider << " "
        << isBufferLooping  << std::endl;

    // Header for center x
    (*headerStream) << name << "_cx "
        << sizeof(values.front().center(0)) <<  " "
        << values.size() << " "
        << divider << " "
        << isBufferLooping  << std::endl;

    // Header for center y
    (*headerStream) << name << "_cy "
        << sizeof(values.front().center(1)) <<  " "
        << values.size() << " "
        << divider << " "
        << isBufferLooping  << std::endl;

    // Write data
    for (const auto & val : values)  { dataStream->write(reinterpret_cast<const char*>(&val.diameter), sizeof(double) ); }
    for (const auto & val : values)  { dataStream->write(reinterpret_cast<const char*>(&val.center(0)), sizeof(double) ); }
    for (const auto & val : values)  { dataStream->write(reinterpret_cast<const char*>(&val.center(1)), sizeof(double) ); }
  }
};
\endcode

For the ros logger we can add a custom msg type to signal_logger_msgs. Lets call it CircleStampe.msg.
Don't forget to add this msg to the CMakeLists.txt of the signal_logger_msgs package.
\code{yaml}
# CircleStamped
Header header
float64 diameter
float64 center_x
float64 center_y
\endcode

signal_logger_ros/signal_logger_ros_traits.hpp :
\code{c}
template<>
struct slr_msg_traits<signal_logger::Circle>
{
  typedef signal_logger_msgs::CircleStamped         msgtype;
  typedef signal_logger_msgs::CircleStampedPtr      msgtypePtr;
  typedef signal_logger_msgs::CircleStampedConstPtr msgtypeConstPtr;
};

template <>
struct slr_update_traits<signal_logger::Circle>
{
  static void updateMsg(const signal_logger::Circle* var,
                        typename slr_msg_traits<signal_logger::Circle>::msgtypePtr msg,
                        const ros::Time& timeStamp)
  {
    msg->header.stamp = timeStamp;
    msg->diameter = var->diameter;
    msg->center_x = var->center(0);
    msg->center_y = var->center(1);
  }
};
\endcode






*/
