/*! \page page_log_file Log File
<H3>Naming convention</H3>
The files are stored in the current working directory (when using ros, /home/$user/.ros/ ) with the following naming convention.
\code{txt}
silo_#y#m#d_#H-#M-#S_#NR
\endcode
<ul>
  <li> <B>#y</B> year as a four-digit number</li>
  <li> <B>#m</B> month of the year as a two-digit number</li>
  <li> <B>#d</B> day of the month as a two-digit number</li>
  <li> <B>#H</B> hour of the day as a two-digit number</li>
  <li> <B>#M</B> minutes of the hour as a two-digit number</li>
  <li> <B>#S</B> seconds of the minute as a two-digit number</li>
  <li> <B>#NR</B> continuous numeration of all log files as a five-digit number </li>
</ul>

Example: The 113th dataset overall, recorded at September 13th 2016 at 12:13:49, would be stored as:
\code{txt}
silo_20160913_12-13-49_00113
\endcode

<H3>File structure</H3>

<H4>Header</H4>
The file starts with a warning that you should not edit the log file in a text-editor, since this could corrupt the binary data.

The next line states the file name.
\code{txt}
# Log File: silo_20160913_12-13-49_00113
\endcode

Then the total number of collect calls is provided for time synchronization of data originating from a looping buffer.
We know that at collect = 0Â all log elements were collected. Thus one can calculate the corresponding time for every element.
\code{txt}
# Time synchronization offset:
27
\endcode

For easier parsing the total number of logged elements is stored to the file as well.
\code{txt}
# Number of Log Elements:
6
\endcode

A list of all saved log elements is given in the manor described by the first (commented) line. The time will always be written to the file,
has always a divider of 1, and the complete number of data values. The other types can vary depending on the logger configuration.
The data type is a string that defines the corresponding [matlab data type](https://ch.mathworks.com/help/matlab/numeric-types.html).
\code{txt}
# (Element Name) (Data Size In Bytes) (No Data Points) (Divider) (Buffer looping (1 or 0)) (Data Type)
/myLoggerNamespace/time_s 8 100 1 0
/myLoggerNamespace/time_ns 8 100 1 0
/myLoggerNamespace/myGroup1/myDataA 1 50 2 0 uint8
/myLoggerNamespace/myGroup1/myDataB 8 50 1 1 double
/myLoggerNamespace/myGroup2/myDataC 4 10 5 0 single
/myLoggerNamespace/myGroup2/myDataD 2 25 4 1 int16
\endcode
Note:
<ul>
  <li> myDataA has 1 byte, a divider of 2 and could save all data (100/2=50), thus the bufferSize >= 50 and not looping. It can be parsed as a uint8 in matlab.</li>
  <li> myDataB has 8 bytes, a divider of 1 and could not save all data (100/1=100 > 50), thus the bufferSize = 50 and looping. It can be parsed as a double in matlab.</li>
  <li> myDataC has 4 bytes, a divider of 5 and could not save all data (100/5=20 > 10), thus the bufferSize = 10 and not looping. It can be parsed as a single in matlab. </li>
  <li> myDataD has 2 bytes, a divider of 4 and could save all data (100/4=25), thus the bufferSize >= 25 and looping. It can be parsed as a int16 in matlab. </li>
</ul>

This information is enough for lossless parsing of the binary data. The time has to be matched differently depending on the buffer type.

<H4>Binary Data</H4>
The third part of the file lists the complete binary data of all log elements.
\code{txt}
# Binary Data
\endcode

 The binary data is written in the order of the header.
The first SizeInBytesElement1*NrDataElement1 bytes correspond to the first element and so on.<BR>
Considering our header:
<ul>
  <li> The first 800 bytes are the time in seconds </li>
  <li> The second 800 bytes are the time in nanoseconds </li>
  <li> The next 50 bytes are myDataA </li>
  <li> The next 400 bytes are myDataB </li>
  <li> The next 40 bytes are myDataC </li>
  <li> The last 50 bytes are myDataD </li>
</ul>

<H3>Parse the log file with Matlab</H3>
A Matlab script that enables you to plot the logged data is provided in signal_logger_std/matlab/processData.m.
The script is documented and should therefore be self-explanatory.

*/
